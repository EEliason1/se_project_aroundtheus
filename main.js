!function(){"use strict";class e{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(`.${t}`)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.append(e)}addNewItem(e){this._container.prepend(e)}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput(this._inputElements)?this.disableButton():this.enableButton()}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}}const s={},r=document.querySelector("#profile-edit-button"),i=(document.querySelector("#profile-input-name"),document.querySelector("#profile-input-description"),document.forms["profile-edit-form"],document.querySelector(".elements__list"),document.querySelector("#profile-add-button")),n=(document.querySelector("#avatar-edit-modal").querySelector("#avatar-edit-form"),document.querySelector("#avatar-edit-button"));class o{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i}_handleLike(){this._likeButton.classList.toggle("elements__like-button_active")}_isAlreadyLiked(){this._isLiked&&this._likeButton.classList.toggle("elements__like-button_active")}_setEventListeners(){this._likeButton=this._template.querySelector("#like-button"),this._deleteButton=this._template.querySelector("#card-delete-button"),this._cardImage=this._template.querySelector("#card-URL"),this._likeButton.addEventListener("click",(()=>{this._isLiked?this._isLiked=!1:this._isLiked=!0,this._handleLike(),this._handleLikeClick(this._id,this._isLiked)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this._id,this._template)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".elements__card").cloneNode(!0)}generateCard(){return this._template=this._getTemplate(),this._setEventListeners(),this._cardImage.src=this._link,this._template.querySelector("#card-title").textContent=this._name,this._cardImage.alt=this._name,this._isAlreadyLiked(),this._template}}class a{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._submitButton=this._popupElement.querySelector(".modal__save-button"),this._popupSelector=t}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),"#card-add-modal"==this._popupSelector?this._submitButton.textContent="Create":this._submitButton.textContent="Save"}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"==e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__exit-button"))&&this.close()}))}}class l extends a{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputElements=this._popupForm.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputElements.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset(),this._submitButton.textContent="Saving...",this.close()}))}}var d;d={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(d.formSelector)).forEach((e=>{const r=new t(d,e),i=e.getAttribute("name");s[i]=r,r.enableValidation()}));const h=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_validatePromise(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._validatePromise)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._validatePromise)}patchUserInfo(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{headers:this._headers,method:"PATCH","Content-Type":"application/json",body:JSON.stringify({name:t,about:s})}).then(this._validatePromise)}setUserAvatar(e){let{avatar:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{headers:this._headers,method:"PATCH","Content-Type":"application/json",body:JSON.stringify({avatar:t})}).then(this._validatePromise)}createCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{headers:this._headers,method:"POST","Content-Type":"application/json",body:JSON.stringify({name:t,link:s})}).then(this._validatePromise)}deleteCard(e){let{_id:t}=e;return fetch(`${this._baseUrl}/cards/${t}`,{headers:this._headers,method:"DELETE","Content-Type":"application/json"}).then(this._validatePromise)}likeCard(e){let{_id:t}=e;return fetch(`${this._baseUrl}/cards/${t}/likes`,{headers:this._headers,method:"PUT"}).then(this._validatePromise)}dislikeCard(e){let{_id:t}=e;return fetch(`${this._baseUrl}/cards/${t}/likes`,{headers:this._headers,method:"DELETE","Content-Type":"application/json"}).then(this._validatePromise)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"0e6b8e99-3fb6-490c-b2a5-5d193b29415c","Content-Type":"application/json"}});let c;function u(e,t){return new o(e,t,C,p,_).generateCard()}function _(e,t){t?h.likeCard({_id:e}).then((()=>{console.log("This post has been liked")})).catch((e=>{console.error(e)})):h.dislikeCard({_id:e}).then((()=>{console.log("This post has been disliked")})).catch((e=>{console.error(e)}))}function p(e,t){m.open(e,t)}h.getInitialCards().then((t=>{c=new e({items:t,renderer:e=>{const t=u(e,"#card-template");c.addItem(t)}},"elements__list"),c.renderItems()})).catch((e=>{console.error(e)}));const m=new class extends a{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleCardDelete=t}open(e,t){super.open(),this._cardId=e,this._cardElement=t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleCardDelete(this._cardId,this._cardElement),this.close()}))}}("#card-delete-modal",(function(e,t){t.remove(),h.deleteCard({_id:e}).then((()=>{console.log("This post has been deleted")})).catch((e=>{console.error(e)}))}));m.setEventListeners(),h.getUserInfo().then((e=>{v.setUserInfo(e)})).catch((e=>{console.error(e)}));const v=new class{constructor(e,t,s){this._userName=document.querySelector(e),this._userJob=document.querySelector(t),this._userAvatar=document.querySelector(s)}getUserInfo(){return{name:this._userName.innerText,about:this._userJob.innerText,avatar:this._userAvatar.src}}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this._userName.innerText=t,this._userJob.innerText=s,this._userAvatar.src=r}}("#profile-name","#profile-description","#profile-avatar"),E=new l("#profile-edit-modal",(e=>{h.patchUserInfo(e).then((e=>{v.setUserInfo(e)})).catch((e=>{console.error(e)}))}));E.setEventListeners(),r.addEventListener("click",(()=>{h.getUserInfo().then((e=>{E.setInputValues(e)})).catch((e=>{console.error(e)})),E.open()}));const b=new l("#card-add-modal",(e=>{const t={name:e.title,link:e.link};h.createCard(t).then((e=>{const t=u(e,"#card-template");c.addNewItem(t),s["card-add-form"].disableButton()})).catch((e=>{console.error(e)}))}));b.setEventListeners(),i.addEventListener("click",(()=>{b.open()}));const f=new l("#avatar-edit-modal",(e=>{h.setUserAvatar(e).then((()=>{n.src=e.avatar}))}));f.setEventListeners(),n.addEventListener("click",(()=>{f.open()}));const S=new class extends a{constructor(e){super({popupSelector:e}),this._popupCaption=this._popupElement.querySelector(".modal__image_caption"),this._popupImage=this._popupElement.querySelector(".elements__image")}open(e,t){this._popupImage.alt=e,this._popupImage.src=t,this._popupCaption.textContent=e,super.open()}}("#preview-image-modal");function C(e,t){S.open(e,t)}S.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,